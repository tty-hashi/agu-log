generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  email           String        @unique
  emailConfirmed  Boolean       @default(false)
  lastSignIn      DateTime?
  profile         UserProfile?
  posts           Post[]
  images          Image[]
  postLikes       PostLike[]
  
  @@map("auth_users")
}

model UserProfile {
  userId            String    @id
  displayName       String
  bio               String?
  location          String?
  avatarUrl         String?
  farmingExperience String?
  websiteUrl        String?
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id])

  @@map("user_profiles")
}

model Post {
  id           String     @id @default(uuid())
  authorId     String
  title        String
  content      String
  slug         String     @unique
  status       PostStatus
  publishedAt  DateTime?
  searchVector String?    // tsvectorの代替
  metadata     Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  author       User       @relation(fields: [authorId], references: [id])
  tags         PostTag[]
  likes        PostLike[]

  @@map("posts")
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model TagCategory {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  tags        Tag[]

  @@map("tag_categories")
}

model Tag {
  id          String      @id @default(uuid())
  name        String
  slug        String      @unique
  categoryId  String
  description String?
  createdAt   DateTime    @default(now())
  category    TagCategory @relation(fields: [categoryId], references: [id])
  posts       PostTag[]

  @@map("tags")
}

model PostTag {
  postId    String
  tagId     String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
  @@map("post_tags")
}

model Image {
  id              String   @id @default(uuid())
  userId          String
  storageKey      String
  originalFilename String
  mimeType        String
  sizeBytes       Int
  width           Int
  height          Int
  metadata        Json?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])

  @@map("images")
}

model PostLike {
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([postId, userId])
  @@map("post_likes")
}
